#pragma once

#include <optional>

#include "color.hh"
#include "piece-type.hh"
#include "position.hh"
#include "report-type.hh"

namespace yaka
{
    /* The move symbolize a movement of a piece. Every turn should
     * correspond to one move. It contains every information related
     * to the action */
    class PgnMove final
    {
    public:
        /* initialize it with PgnMove::opt_piece_t { [PieceType] } */
        using opt_piece_t = std::optional<PieceType>;

        PgnMove(const Position& start, const Position& end, PieceType piece,
                bool capture, ReportType report,
                const opt_piece_t& promotion = std::nullopt);

        PgnMove(const Position& start, const Position& end, bool capture,
                ReportType report, const opt_piece_t& promotion = std::nullopt);

        /*! \brief Generate a castling given a color and a side */
        static PgnMove generate_castling(bool queen_side, Color color);

        /*! \brief Return wether the move is a castling or not */
        bool is_castling() const;

        /*! \brief Return wether the castling is queen side or not
         ** This function suppose that the move is a valid castling
         */
        bool is_castling_queenside() const;

        const Position& start_get() const;

        const Position& end_get() const;

        PieceType piece_get() const;

        const opt_piece_t& promotion_get() const;

        bool capture_get() const;

        ReportType report_get() const;

        void report_set(ReportType report);

        bool operator==(const PgnMove& other) const;

        bool operator!=(const PgnMove& other) const;

    private:
        // The original position of the piece
        const Position start_;

        // The destination of the piece
        const Position end_;

        // The type of the moving piece
        PieceType piece_;

        // if promotion, contains the piecetype generated by the promotion
        opt_piece_t promotion_;

        // if the move is a capture
        bool capture_;

        // type of report given by the pgn file
        ReportType report_;
    };
} // namespace board
